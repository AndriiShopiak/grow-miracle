import { NextRequest, NextResponse } from 'next/server';
import axios from 'axios';
import { cultivars } from '@/data/products';
import { getProductPrice } from '@/utils/productUtils';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { items, customerInfo, clientTime } = body;

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      return NextResponse.json(
        { error: 'Telegram configuration missing' },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
    let message = `üõí *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É –°–∞–¥ –û–ª–µ–≥–∞*\n\n`;
    
    // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
    message += `üë§ *–ö–ª—ñ—î–Ω—Ç:*\n`;
    message += `–Ü–º'—è: ${customerInfo.name}\n`;
    message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${customerInfo.phone}\n`;
    if (customerInfo.email) {
      message += `Email: ${customerInfo.email}\n`;
    }
    if (customerInfo.address) {
      message += `–ê–¥—Ä–µ—Å–∞: ${customerInfo.address}\n`;
    }
    if (customerInfo.comments) {
      message += `–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: ${customerInfo.comments}\n`;
    }
    
    message += `\nüì¶ *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n`;
    
    let totalItems = 0;
    let totalAmount = 0;
    items.forEach((item: { id: number; title: string; qty: number; price?: number }, index: number) => {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ —Ç–∞ –¥–µ—Ç–∞–ª–µ–π
      const product = cultivars.find(p => p.id === item.id);
      const itemPrice = product ? getProductPrice(product) : item.price || 800;
      const priceText = product?.price || `${itemPrice} –≥—Ä–Ω/—à—Ç`;
      const itemSum = item.qty * itemPrice;
      
      message += `${index + 1}. ${item.title}`;
      if (product) {
        message += ` (${product.species})`;
        if (product.rootSystem) {
          message += ` [${product.rootSystem === 'open' ? '–í–ö–°' : '–ó–ö–°'}]`;
        }
      }
      message += ` ‚Äî ${item.qty} —à—Ç. √ó ${priceText} = ${itemSum.toLocaleString('uk-UA')} –≥—Ä–Ω\n`;
      totalItems += item.qty;
      totalAmount += itemSum;
    });
    
    message += `\nüìä *–ü—ñ–¥—Å—É–º–æ–∫:*\n`;
    message += `–í—Å—å–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π: ${items.length}\n`;
    message += `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${totalItems} —à—Ç.\n`;
    message += `–î–æ —Å–ø–ª–∞—Ç–∏: ${totalAmount.toLocaleString('uk-UA')} –≥—Ä–Ω\n`;
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å –∫–ª—ñ—î–Ω—Ç–∞, —è–∫—â–æ –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞–Ω–∏–π, —ñ–Ω–∞–∫—à–µ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π —á–∞—Å
    const orderTime = clientTime ? new Date(clientTime).toLocaleString('uk-UA') : new Date().toLocaleString('uk-UA');
    message += `\n‚è∞ –ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderTime}`;

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
    const telegramResponse = await axios.post(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
      }
    );

    if (telegramResponse.data.ok) {
      return NextResponse.json({ success: true });
    } else {
      throw new Error('Failed to send message to Telegram');
    }
  } catch (error) {
    console.error('Error sending to Telegram:', error);
    return NextResponse.json(
      { error: 'Failed to send order to Telegram' },
      { status: 500 }
    );
  }
}
